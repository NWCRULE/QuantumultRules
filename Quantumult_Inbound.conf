# 2023-02-24: 部分修改
# 2022-09-26: 增加对各个模块的说明(部分内容只适用于 1.1.0 以上版本)
# 注意: 以 ";" 或 "#" 或 "//" 开头的行为注释行。
#
# 最新完整的示例需查看 Quantumult X 里「配置文件」中的「示例」
#
              
[general]
;profile_img_url=http://www.example.com/example.png

# ----------资源解析器----------
# 可用于自定义各类远程资源的转换，如节点，规则 filter，复写 rewrite 等，url 地址可远程，可 本地/iCloud(Quantumult X/Scripts目录)
# resource_parser_url 示例可以在以下网站找到 https://raw.githubusercontent.com/crossutility/Quantumult-X/master/resource-parser.js
resource_parser_url=https://raw.githubusercontent.com/KOP-XIAO/QuantumultX/master/Scripts/resource-parser.js

# ----------节点信息展示----------
# geo_location_checker用于节点页面的节点信息展示，可完整自定义展示内容与方式
#  extreme-ip-lookup为Quantumult X 作者提供的示范 api
# geo_location_checker=http://extreme-ip-lookup.com/json/, https://raw.githubusercontent.com/crossutility/Quantumult-X/master/sample-location-with-script.js
# 下面是我所使用的 api 及获取、展示节点信息的 js
geo_location_checker=http://ip-api.com/json/?lang=zh-CN, https://raw.githubusercontent.com/NWCRULE/QuantumultRules/main/IP_API.js

# ----------节点连通性测试----------
# Quantumult X 会对 server_check_url 指定的网址进行相应测试，以确认节点的可用性
# Quantumult X 使用 HEAD 方法将 HTTP 请求发送到服务器检查 url 来测试代理的状态，结果应该是两个延迟，第一个是 TCP 与代理服务器的握手，第二个是 Quantumult 成功地从服务器检查 url 接收 HTTP 响应的总时间。闪电图标表示 TCP Fast Open 成功。如果 [server_local] 或 [server_remote] 中的服务器有自己的 server_check_url，则会用自己的 server_check_url 代替 [general] 中的 server_check_url。
# Quantumult 使用 HTTP HEAD 方法对测试网址 server_check_url 进行网页响应性测试(测试结果为通过该节点访问此网页获得 HTTP 响应所需要的时间)，来确认节点的可用性。
# Quantumult 界面中的延迟测试方式均为网页响应性测试，显示的最终延迟均为通过对应节点访问测试网页获得 HTTP 响应所需要时间。
# 由于 Trojan 协议为无响应校验协议，使得 HTTP 检测方式即使获得了 HTTP 响应，也不代表节点一定可用。
# 你同样可以在 server_local/remote 中，为节点、订阅单独指定server_check_url参数
# 如您为节点单独指定了 url，则所有相关延迟测试中，均会采用此 url 地址
server_check_url= http://time.is/
# 节点延迟测试超时参数，需小于 5000 毫秒才生效
server_check_timeout=4500

# ----------DNS 排除列表----------
# dns_exclusion_list 包含了禁用占位符 IP (240.*) 的域，不在 dns_exclusion_list 中的域都启用了占位符 IP，并打开了 resolve-on-remote 设置。
dns_exclusion_list=*.cmpassport.com, *.jegotrip.com.cn, *.icitymobile.mobi, id6.me, *.pingan.com.cn, *.cmbchina.com

# ----------路由排除列表----------
# Quantumult 将不会处理到 excluded_routes 的流量。修改后最好重新启动您的设备。
;excluded_routes=192.168.0.0/16, 172.16.0.0/12, 100.64.0.0/10, 10.0.0.0/8
# Hearthstone: 24.105.30.129/32, 185.60.112.157/32, 185.60.112.158/32, 182.162.132.1/32
excluded_routes=239.255.255.250/32, 24.105.30.129/32, 185.60.112.157/32, 185.60.112.158/32, 182.162.132.1/32

# ----------网络规则设置----------
# 在网络环境切换时出发运行模式变更
# filter - 规则分流，all_proxy - 全部代理，all_direct - 全部直连
# 示例意思：[蜂窝数据],[Wi-Fi],[SSID]
# 下列示例的意思为：在蜂窝数据使用规则分流(第一个 filter)，在 Wi-Fi 使用规则分流(第二个 filter)，在 SSID 为 LINK_22E171 的 Wi-Fi 使用全部代理，，在 SSID 为 LINK_22E172 的 Wi-Fi 使用全部直连
# Rewrite 及 Task 模块始终生效
;running_mode_trigger=filter, filter, LINK_22E171:all_proxy, LINK_22E172:all_direct

# 在特定 SSID 网络时(除了 Task 模块)暂停 Quantumult X
# ssid_suspended_list=LINK_22E174, LINK_22E175


# ----------UDP 设置----------
# udp_whitelist 包含目标 UDP 端口，空表示所有的端口都在 udp_whitelist 中。通过Quantumult 隧道接口发送的 UDP 数据包(通过 Quantumult 隧道接口)，目标端口不在 udp_whitelist 中的 UDP 包将被丢弃。这个设置与策略无关，也与代理(服务器)端口无关。
# udp_whitelist=53, 123, 1900, 80-443

# UDP 白名单，留空则默认所有为端口。不在udp白名单列表中的端口，将被丢弃处理（返回 ICMP  “端口不可达” 信息）。
# udp_whitelist=53, 80-427, 444-65535

#  UDP Drop名单，同白名单类似，但不会返回 ICMP “端口不可达” 信息
#  drop 名单仅处理 whitelist名单中的端口
# udp_drop_list = 1900, 80

# 参数 fallback_udp_policy 仅支持 v1.0.19 以及之后的版本。
# 参数 fallback_udp_policy 的值仅支持末端策略（末端策略为经由规则模块和策略模块后所命中的策略，例如：direct、reject 以及节点；不支持内置策略 proxy 以及其它自定义策略）。
fallback_udp_policy=direct



[dns]
# 查询结果只用于评估过滤器或通过直接策略连接，当通过服务器连接时，查询结果不会被使用，Quantumult 永远不会知道相关域名的目标 IP。
# 如果您想让某个域名(例如：example.com)为 127.0.0.0.1，只需在「filter_local」部分添加「host, example.com, reject」即可。拒绝操作将返回 127.0.0.0.1 的 DNS 响应。

# ----------禁用系统 DNS----------
# 为了提高性能，会使用从当前网络(系统)中获取的 DNS 服务器(您可以使用「no-system」禁用此功能，但至少要增加一个自定义的DNS服务器，如「server=223.5.5.5.5」)。
;no-system

# ----------禁用 IPv6----------
# 当设置「no-ipv6」时，Quanumult X Tunnel 的 DNS 模块会直接让 AAAA 查询失败。
# no-ipv6

# 自定义 DNS
server=1.0.0.1
server=8.8.4.4
server=114.114.114.114
server=202.141.176.93 
server=202.141.178.13
server=117.50.10.10
server=223.5.5.5
server=119.29.29.29:53
server=119.28.28.28

;server=8.8.4.4:53
;server=/example0.com/system
;server=/example1.com/8.8.4.4
;server=/*.example2.com/223.5.5.5
;server=/example4.com/[2001:4860:4860::8888]:53
;address=/example5.com/192.168.16.18
;address=/example6.com/[2001:8d3:8d3:8d3:8d3:8d3:8d3:8d3]




[policy]
# ----------自定义策略设置----------
# 设置后，可以选择策略进行代理
# 
# 需要策略图标的在策略后加上：img-url=http://example.com/icon.png
#

# 1-类型：静态(static)
# 指向您手动选择的候选服务器。
#
# 注意：static与filter_remote中的force-policy相同时，用于强制指定代理策略
#
;static=policy-name-1, Sample-A, Sample-B, Sample-C, img-url=http://example.com/icon.png

# 2-类型：可用(available)
# 指向候选服务器的第一个可用服务器(当策略被触发且策略结果不可用时，将立即启动并发 url 延迟测试。
# 如果当时没有网络请求接受策略，这意味着策略处于空闲状态，即使服务器关闭，测试也不会启动。那时，您可以通过手动启动测试来更新服务器状态，但是这没有任何意义)。
;available=policy-name-2, Sample-A, Sample-B, Sample-C

# 3-类型：负载均衡(round-robin)
# 指向在候选服务器中指向下一个服务器以进行下一次连接。
;round-robin=policy-name-3, Sample-A, Sample-B, Sample-C

# 4-类型：延迟测试(url-latency-benchmark)
# 策略指向具有最佳 URL 延迟(公差，单位毫秒)结果的服务器。
# 当用户在 Quantumult X 中手动启动 URL 测试时，策略结果也会被更新。
# 该类型的策略有一个名为 check-interval(秒) 的参数，如果此策略已经被任何请求激活，则将考虑该间隔。
;url-latency-benchmark=policy-name-8, resource-tag-regex=^sample, server-tag-regex=^example, check-interval=600, tolerance=0

# dest-hash 策略组，随机负载均衡，但相同域名走固定节点。
# ssid 策略组，将根据你所设定的网络来自动切换节点/策略组
# img-url 参数用于指定策略组图标，可远程，也可本地/iCloud(Quantumult X/Images路径下) （108*108 大小）
# direct/proxy/reject 则只能用本地图标，名字分别为 direct.png, proxy.png,reject.png 放置于 Images 文件夹下即可生效 (108*108 大小)

# SSID
# 策略根据网络环境的不同指向服务器。
# ssid=policy-name-4, Sample-A, Sample-B, LINK_22E171:Sample-B, LINK_22E172:Sample-C

# resource-tag-regex 及 server-tag-regex 仅适用于 static、available 和 round-robin 类型的策略。
# static=policy-name-5, resource-tag-regex=^sample, server-tag-regex=^example, img-url=http://example.com/icon.png
# available=policy-name-6, resource-tag-regex=^sample, server-tag-regex=^example
# round-robin=policy-name-7, resource-tag-regex=^sample, server-tag-regex=^example

static=Bilibili, direct, proxy, img-url=https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/bilibili.png
static=NeteaseMusic, direct, proxy, img-url=https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Netease_Music.png
static=DomesticMedia, direct, proxy, img-url=https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/DomesticMedia.png
static=Domestic, direct, proxy, img-url=https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Domestic.png
static=OverseaMedia, direct, proxy, img-url=https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/GlobalMedia.png
static=Oversea, direct, proxy, img-url=https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Global.png
static=Others, direct, proxy, img-url=https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Final.png

[server_remote]

# "tag" 和 "enabled" 为可选参数，分别表示 “标签”及“开启状态”, true 为开启，false 关闭.
# update-interval 为更新时间参数，单位 秒, 默认更新时间为 24*60*60=86400 秒，也就是24小时.
# opt-parser=true/false 用于控制是否对本订阅 开启资源解析器，不写或者 false 表示不启用解析器

https://xxxx.com/xxxx.txt, tag=Nya-WSL InBound Service,  img-url=https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Bypass.png, enabled=true

[filter_remote]
#
# ----------远程规则设置----------
# 参数「tag」、「force-policy」和「enabled」是可选的。
# 远程分流模块，可使用force-policy来强制使用策略偏好, 替换远程规则内所指定的策略组
# 当有强制策略时，远程资源的过滤器中的策略将被忽略，并使用强制策略。
# update-interval 为更新时间参数，单位 秒, 默认更新时间为 24*60*60=86400 秒，也就是24小时.
# opt-parser=true/false 用于控制是否对本订阅 开启资源解析器，不写或者 false 表示不启用解析器# 

# StreamingCN 中国流媒体服务(面向海外版本)
# https://raw.githubusercontent.com/DivineEngine/Profiles/master/Surge/Ruleset/StreamingMedia/StreamingCN.list, tag=StreamingSE, force-policy=StreamingSE, update-interval=86400, opt-parser=true, enabled=true

# global
# https://raw.githubusercontent.com/NWCRULE/QuantumultRules/main/list/global.list, tag=GlobalRule, update-interval=86400, opt-parser=true, enabled=true

# 网易云音乐
https://raw.githubusercontent.com/NWCRULE/QuantumultRules/main/list/NeteaseMusic.list, tag=NeteaseMusic, force-policy=NeteaseMusic, update-interval=86400, opt-parser=true, enabled=true

# Bilibili
https://raw.githubusercontent.com/NWCRULE/QuantumultRules/main/list/Bilibili.list, tag=Bilibili, force-policy=Bilibili, update-interval=86400, opt-parser=true, enabled=true

# 中国大陆媒体
https://raw.githubusercontent.com/NWCRULE/QuantumultRules/main/list/DomesticMedia.list, tag=DomesticMedia, force-policy=DomesticMedia, update-interval=86400, opt-parser=true, enabled=true

# 中国大陆地址池
https://raw.githubusercontent.com/NWCRULE/QuantumultRules/main/list/Domestic.list, tag=Domestic, force-policy=Domestic, update-interval=86400, opt-parser=true, enabled=true

# 海外流媒体
https://raw.githubusercontent.com/NWCRULE/QuantumultRules/main/list/OverseaMedia.list, tag=OverseaMedia, force-policy=OverseaMedia, update-interval=86400, opt-parser=true, enabled=true

# 海外地址池
https://raw.githubusercontent.com/NWCRULE/QuantumultRules/main/list/Oversea.list, tag=Oversea, force-policy=Oversea, update-interval=86400, opt-parser=true, enabled=true


# 广告域名屏蔽
https://raw.githubusercontent.com/DivineEngine/Profiles/master/Quantumult/Filter/Guard/Advertising.list, tag=Reject-ADs, update-interval=86400, opt-parser=true, enabled=true

# 运营商劫持屏蔽
https://raw.githubusercontent.com/DivineEngine/Profiles/master/Quantumult/Filter/Guard/Hijacking.list, tag=Reject-Hijacking, update-interval=86400, opt-parser=true, enabled=true



[rewrite_remote]
#
# 参数「tag」和「enabled」是可选的。
#

# General
https://raw.githubusercontent.com/DivineEngine/Profiles/master/Quantumult/Rewrite/General.conf, tag=General, update-interval=86400, enabled=true

[server_local]
#
# 只有 obfs=http, obfs=ws, obfs=ws, obfs=wss 可以有可选的「obfs-uri」字段。
# wss 中的 obfs-host 参数将用于 TLS 握手和 HTTP 头主机字段，如果没有为 wss 设置 obfs-host，则将使用服务器地址。
# 目前不支持 VMess 和 Trojan 的 UDP relay。
# 当使用 obfs=ws 和 obfs=wss 时，服务器端可以通过带有 mux=0 的 v2ray-plugin 或 v2ray-core 进行部署。
# obfs plugin tls1.2 ticket auth 比 tls1.2 ticket fastauth 和 obfs tls 多一个 RTT，你最好使用 tls1.2 ticket fastauth。
# chacha20-ietf-poly1305 和 chacha20-poly1305 在 VMess 配置中具有相同的效果。
#
# 可选字段 tls13 仅用于：shadowsocks obfs=wss / vmess obfs=over-tls and obfs=wss / http over-tls=true / trojan over-tls=true
# [server_local] 完整示例请查看「示例」

[filter_local]
# Local Area Network 局域网
host-suffix, local, direct
ip-cidr, 192.168.0.0/16, direct
ip-cidr, 10.0.0.0/8, direct
ip-cidr, 172.16.0.0/12, direct
ip-cidr, 127.0.0.0/8, direct
ip-cidr, 100.64.0.0/10, direct
ip-cidr, 224.0.0.0/4, direct
ip6-cidr, fe80::/10, direct

# GeoIP China(若启用，则禁用 ChinaIP.list)
geoip, cn, Domestic

# 不在上述规则中(远程以及本地)的剩余请求，将走final 指定的节点/策略，这里即是 → 其他地址, 请根据自己的需求来选择直连或节点、策略
# 此为必需规则，仅可修改对应策略组，请勿删除 final

final, Others

[rewrite_local]
# [rewrite_local] 完整示例请查看「示例」

[task_local]
#
# $task.fetch() 组成一个 HTTP 请求并处理响应，只支持 text body。如果您想要 serial requests 而不是 current requests，可以将 $task.fetch() 嵌入到另一个 $task.fetch() 的完成处理程序中。
#
# 脚本应保存在本地「我的 iPhone - Quantumult X - Scripts」或「iCloud Drive - Quantumult X - Scripts」中。示例：https://github.com/crossutility/Quantumult-X/blob/master/sample-task.js
#
# 默认的 HTTP 请求超时是 10 秒。
#
# 支持 5 或 6 个 cron 字段，不包括命令字段。
#
# [task_local] 支持3种类型: cron 定时任务，UI交互脚本，网络切换脚本

# 1-任务模块，可用于签到,天气话费查询等
# js文件放于iCloud或者本机的Quantumult X/Scripts 路径下。TF版本可直接使用远程js链接
# 从 “分” 开始的5位cron 写法，具体 cron 表达式可自行 Google
# 比如上述语句 代表每天 12 点 2 分，自动执行一次
# tag参数为 task 命名标识
# img-url参数用于指定 task 的图标(108*108)

# 2 12 * * * sample.js, tag=本地示范(左滑编辑，右滑执行), enabled=false, img-url=https://raw.githubusercontent.com/crossutility/Quantumult-X/master/quantumult-x.png
# 13 12 * * * https://raw.githubusercontent.com/crossutility/Quantumult-X/master/sample-task.js, tag=远程示范(点击缓存/更新脚本), enabled=false, img-url=https://raw.githubusercontent.com/crossutility/Quantumult-X/master/quantumult-x.png

# 2-UI交互查询脚本示范，在首页长按 节点/策略组 唤出
# event-interaction https://raw.githubusercontent.com/KOP-XIAO/QuantumultX/master/Scripts/streaming-ui-check.js, tag = 流媒体 - 解锁查询, img-url=checkmark.seal.system, enabled=true

# 3-网络切换/变化时 触发的脚本类型
# event-network sample-taks.js
# [task_local] 完整示例请查看「示例」

[http_backend]
#
# 部署一个本地 HTTP 服务器，并使用 JavaScript 进行数据处理。
# 输入变量为：$reqeust.url、$reqeust.path、$reqeust.headers、$reqeust.body。
# 使用 $done 输出像 $done({status:"HTTP/1.1 200 OK"}, headers:{}, body:"here is a string") 这样的返回响应。
# 此外，您还可以使用签名或任何其他验证方法来验证请求是否合法。
# 部署后您应该通过 http://127.0.0.1:9999/your-path/your-api/. 进行访问。服务器默认监听端口为 9999，您可以在UI中进行更改。
#
# [http_backend] 完整示例请查看「示例」

[mitm]
#
# 只有「hostname」中的 TLS SNI 或目标地址将被 MitM 处理。
#
# 默认情况下，当为 HTTPS 请求启用 MitM 时，Quantumult X 会从原站点获取证书（证书会被缓存），保留大部分需要的原始证书信息，并使用 MitM 的 root CA 重新签名，这是推荐的（也是比较兼容的）MitM 证书创建方式。
#
# 偶尔有些用户喜欢调试 HTTPS 请求，其域名不存在，所以原证书根本不存在。当参数 simple_cert_hostname 出现的时候。其 TLS SNI 名称在 simple_cert_hostname(及 hostname) 中的 HTTPS 请求将使用纯本地生成的 MitM 证书。
#
# 注意！！！您应该始终保护您的 CA 密码和 p12 的私密性。
#
;passphrase =
;p12 =
skip_validating_cert = true
;force_sni_domain_name = false
;simple_cert_hostname = non-existed-domain.com, *.non-connected-domain.com
;hostname = *.googlevideo.com